---
title: "4: Lists and arrays"
subtitle: "R for faculty, Fall 2024"
author: "Jonas Moss"
format:
  revealjs:
    error: True
    theme: [default, custom.scss]
    width: 1600
    height: 900
    embed-resources: True
    mainfont: "Verdana"
    min-scale: 0.2
    max-scale: 2
    echo: true
---

# Vectors 

## Recap: `rep` and `seq`

```{r}
seq(1, 20, by = 3)
rep(c(1,2,3), 3)
```


## On `rep` and `seq`

* `rep` and `seq` are simple, but are usually the first step in vector generation.
* But you often want something more complex than this.
* You may want to apply a function to each element of the vector.
* E.g., a sequence of squares: `1, 4, 9, 16, 25, ...`

:::{.r-stack}
That's the r√¥le of `sapply`!
:::

## `sapply`

`sapply(X, FUN)` takes a vector `X` and a function `FUN`, then applies `FUN` to every element `x` in `X`. It's similar to a simple list comprehension in Python.

For instance, we may calculate all squares of a sequence as follows.
```{r}
sapply(seq(10), \(x) x^2)
```


:::{.panel-tabset}

### Exercise
Use `sapply` and `paste` to print out the strings `"I love 1"`, `"I love 2"`, ..., `"I love 10"`.

### Solution
```{r}

```

### Exercise
Make a function `cube_sum(n)`that calculates the sum of the `n` first *cubic* numbers, i.e, $1^3+2^3+3^3+\ldots n^3$. 

### Solution
```{r}

```

:::


## Vectorization

All arithmetic operations in `R` are *vectorized*, i.e., the can be applied directly to vectors or arrays without using `sapply`.

```{r}
sapply(seq(10), \(x) x^2)
```

```{r}
seq(10)^2
```

Vectorized operations are easier to read, faster to write, and much faster to compute. 

It's actually **bad style** to use `sapply` in this case!

## Vectorization exercises

Vectorized computations can be applied to any vector and be mixed and matched.

```{r}
x <- seq(1, 100, by = 10)
y <- seq(1, 10)
x
```

```{r}
y^3 + 2 * x
```

:::{.panel-tabset}
### Exercise 1
Rewrite `cube_sum` to use vectorization.

### Solution 1
```{r}

```

### Exercise 2
Divide all numbers in `x=seq(1,10)` by `11`.

### Solution 2
```{r}

```

### Exercise 3
Calculate the pairwise sum of `x` and `y` when `x=c(1,2,3)` and `y=c(0,1,6)`. (The pairwise sum is `c(0, 3, 9)`).

### Solution 3
```{r}

```

:::

## More vectorization

Vectorized operations can be combined with each other and with scalar operations.

```{r}
x <- seq(10)
y <- seq(1, 100, length.out = 10)
```

```{r}
(x^2 - y) / sqrt(x)
```

```{r}
sum((x^2 - y) / sqrt(x))
```


:::{.panel-tabset}
### Exercise
The dot product of two vectors `x,y` of equal length `n`equals `x[1]y[1] + x[2]y[2] + ... + x[n]y[n]`. Write a `dot(x,y)` function that returns the dot product. Use vectorization!

### Solution 1
```{r}

```

### Solution 2
```{r}

```

:::

## When is `sapply` needed?

* `sapply` is needed when dealing with non-vectorized functions.

* ... or when vectorization does not work as intended.

```{r}
cube_sum <- \(n) sum(seq(n)^3)
cube_sum(seq(10))
```

```{r}
sapply(seq(10), cube_sum)
```

## Vectorize functions with `Vectorize`

The `Vectorize` function vectorizes a function for you. 
```{r}
cube_sum_vec <- Vectorize(cube_sum)
cube_sum_vec(seq(10))
```

* It's handy to use `Vectorize` instead of `sapply` if you need to call the function a lot of times for experimentation.

* It comes with a slight performance penalty - this penalty might be big if you call it many times though.

## `unique` and `table`

The `unique` function returns the unique values.

```{r}
unique(ChickWeight$Diet)
```

`table` returns the count of all the unique values.
```{r}
table(ChickWeight$Diet)
```


# Indexing

## Basic indexing

You can index vectors with a number (starting from `1`), or another vector.
```{r}
x <- seq(0, 100, by = 10)
x
```

```{r}
x[2]
```

```{r}
x[seq(2, 5)]
```

## Negative indexing

Negative indexing removes columns.
```{r}
x[-1]
```

```{r}
x[-c(1,5)]
```

:::{.panel-tabset}
### Exercise
Let `x=runif(10)`. These are 10 uniformly sampled random numbers from 0 to 1. Choose the 3rd and 7th element from this vector.

### Solution
```{r}

```

### Exercise
Remove the third and seventh element from the vector.

### Solution
```{r}

```

:::

## Boolean indexing

If `y` is a vector of logicals (Boolean), then you can index `x` using `y`.


```{r}
y <- c(FALSE, TRUE, TRUE, FALSE)
x <- c(8, 1, 9, 10)
x[y]
```

Boolean indexing is very useful!

::: {.panel-tabset}
### Exercise
Let `scores<-c(5,6,7,1, 10)` be a vector of scores from `1` to ten and `sex<-c("FEMALE","FEMALE","MALE","MALE","FEMALE")` be the sex of the participants. Select all female scores.

### Solution
```{r}

```

:::


## Indexing from the end

Say you want the $x_5, x_6, \ldots, x_n$ from an array. 

```{r}
x <- seq(0, 100, by = 10)
x[seq(5, length(x))]
```

(Unlike Python, where you would write `x[5:]`. Sad but true!)


```{r}
x <- seq(0, 100, by = 10)
tail(x, 5)
```

# Lists

## A list

A *list* is a vector containing elements of potentially different types.

```{r}
x <- list("a", 1, \(x) x + 1)
x
```

```{r}
typeof(x)
```

## Named lists

```{r}
x <- list(name = "Christopher", number = 55, func = \(x) x**2)
x
```

Access elements with `$`. Semantically similar to Python dictionaries.

```{r}
x$func
```

```{r}
x$func(10)
```


# Multidimensional arrays
## Arrays

$$ $$

## Dimensions

```{r}
x <- c(1,2,3,4,5,6)
dim(x) <- c(2, 3)
x
```

```{r}
attr(x, "dim")
```

```{r}
dim(x)
```

::: {.panel-tabset}

### Exercise
Construct an array `x` containing the numbers 1 through 33. It should have three rows and 11 columns

### Solution
```{r}

```

### Exercise
Change the dimension of `x` to `c(4,8)`. What happens?

### Solution
```{r}

```

:::

## Rows and columns

```{r}
x <- as.array(as.matrix(mtcars))
```


```{r}
nrow(x)
```

:::{.panel-tabset}

### Exercise
Find the number of columns in `x`. This can be done in two ways!

### Solution
```{r}

```

:::

## Transpose

The transpose of an array swaps the dimensions, so that columns become rows and vice verse. Transpose an array with `t(x)`.

:::{.panel-tabset}

### Exercise
Construct the two-dimensional array 

$$
\left[\begin{array}{ccc}
1 & 2 & 3\\
4 & 5 & 6
\end{array}\right]
$$

### Solution
```{r}

```

:::

## Array arithmetic

Define two array `x` and `y`.
```{r}
x <- c(1,2,3,4)
dim(x) <- c(2,2)
x
```

```{r}
y <- c(2,2,1,1)
dim(y) <- c(2,2)
y
```

Arithmetic works *element-wise*.

```{r}
x * y
```



## Indexing

```{r}
#| eval: False
arr[row_indices, col_indices]
```

Either argument can be empty; then everything is selected.

```{r}
x <- as.array(as.matrix(mtcars))
```

```{r}
x[seq(1, 5), ]
```

```{r}
x[seq(1, 5), seq(2:4)]
```



## Column names and row names

Matrices and arrays can have column- and row names.

```{r}
x <- as.array(as.matrix(mtcars))
```

::: {.panel-tabset}

### Column names
```{r}
colnames(x)
```

```{r}
colnames(x) <- c("miles_per_gallon", colnames(x)[2:ncol(x)])
```

```{r}
colnames(x)
```

### Row names
```{r}
rownames(x)
```

### Exercise
Change the name of the row called "Merc 280" to "Merc 280 <3". (*Hint*: Try to use indexing on `rownames(x)`!)

### Solution
```{r}

```

### Exercise
Remove the column names of `x`. (How do you make something "nothing" in `R`?)

### Solution
```{r}

```

:::

## Subseting with boolean masks

```{r}
head(mtcars)
```


```{r}
head(mtcars[mtcars$cyl == 4, ])
```
:::{.panel-tabset}

### Exercise
Find the subtable of `mtcars` where `hp < 70`.

### Solution
```{r}

```

:::


## Contingency tables

A contingency table looks like this

| gender |	cup	| cone |	sundae |	sandwich |	other |
| -----  | ---  | ---- | ---     | -----     | ---    |
| male	 | 592	| 300	 | 204	   |   24	     | 80     |
| female | 410	| 335	 | 180	   | 20	       | 55     |

## Contingency table with `table`

::: {.panel-tabset}

### Data
```{r}
head(MASS::Cars93, 5)
```

### Table

```{r}
x <- MASS::Cars93$Type
y <- MASS::Cars93$Origin
xy_tbl <- table(x, y)
xy_tbl 
```

### Exercise
Use the `class` function to find the *class* of `xy_tbl`. Also find its type using `typeof`. Then inspect the object using `str`. What does all of this mean?

### Solution
```{r}

```

:::

## More dimensions
* `R` supports arrays with more than two dimensions. 
* These are rarely useful, but they exist.

```{r}
x <- as.array(as.matrix(mtcars))
```

```{r}
print(dim(x))
dim(x) <- c(16, 2, 11)
```

```{r}
x[1, 2, 3]
```





## Column sums and row sums

We're often interested in the column sum or mean.
```{r}
x <- mtcars
```

```{r}
colSums(x)
```

:::{.panel-tabset}

### Exercise
Calculate the row sums of `mtcars`.

### Solution
```{r}

```

### Exercise
Calculate the column means of `mtcars`.

### Solution
```{r}

```

:::

## Using for loops

```{r}
sums <- rep(0, ncol(mtcars))
for (i in seq_along(sums)) sums[i] = sum(mtcars[,i])
names(sums) <- colnames(mtcars)
sums
```

## The `apply` function

```{r}
apply(mtcars, 2, var)
```

Or, more transparently:
```{r}
apply(mtcars, 2, \(x) var(x))
```

::: {.panel-tabset}

### Exercise
Use `apply` to calculate the correlation between `mtcars["mpg"]` and all the other variables in `x`. (Use the `cor` function for this.)

### Solution
```{r}

```

:::

# Summary

1. Arrays often have names. Index columns using `arr$name`.
2. Subscripting is similar to vectors. Access using `arr[rows, cols]`.
3. Use Boolean indexing to select subframes.
4. `apply` applies a function along all columns / rows of a data frame.
