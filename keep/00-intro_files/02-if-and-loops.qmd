---
title: "2: Loops, `ifs`, and vectors"
subtitle: "R for faculty, Fall 2024"
author: "Jonas Moss"
format:
  revealjs:
    error: True
    theme: [default, custom.scss]
    width: 1600
    height: 900
    embed-resources: True
    mainfont: "Verdana"
    min-scale: 0.2
    max-scale: 2
    echo: true
---

# Conditional execution

## Boolean values
Booleans (after George Boole) are logical values.

```{r}
TRUE == FALSE
```


```{r}
1 == 2
```

```{r}
1 > 2
```

```{r}
1 <= 3
```

```{r}
1 != 3
```

```{r}
1 >= 3
```

## Conditional execution

What is `y`?
```{r}
x = FALSE
y = 0
if (x) {
  y = 2
}
```

. . .

```{r}
print(y)
```

. . .

What is `y`? 

```{r}
x = FALSE
y = 0
if (x) y = 2
```

. . .

```{r}
print(y)
```

## The `if` construct

```{r}
#| eval: False
if (condition) {
  do_something() # but only if `condition` is TRUE
}
```

. . .

We also have the `else` clause.

```{r}
x = "FruBeast"

if(x == "MrBeast") {
  print("LOL")
} else {
  print("Boring!")
}
```

## `else if`

:::{.panel-tabset}

### `else if`
An `else if` clause executes if the preceeding clauses have not.

```{r}
x = "FruBeast"

if(x == "MrBeast") {
  print("LOL")
} else if (x == "FruBeast") {
  print("Say WHAAT?")
} else {
  print("Boring!")
}
```

### Exercise
Verify that the preceeding `if-else` does what it should when `x="MrBeast"` and `x="LOL"`.

### Solution

```{r}
x = "MrBeast"

if(x == "MrBeast") {
  print("LOL")
} else if (x == "FruBeast") {
  print("Say WHAAT?")
} else {
  print("Boring!")
}
```

### Solution (2)
```{r}
x = "LOL"

if(x == "MrBeast") {
  print("LOL")
} else if (x == "FruBeast") {
  print("Say WHAAT?")
} else {
  print("Boring!")
}
```
:::


## `else if` exercise

:::{.panel-tabset}

### Exercise
Make an `if-else` statement than returns:

* 9 if `x=0`
* 5 if `x=1`,
* 3 if `x=2`,
* `x` otherwise.

### Solution

```{r}
x = 2
if(x == 0) {
  9
} else if (x == 1) {
  5
} else if (x == 2){
  3
} else {
  x
}
```

:::

## Logical operators

:::{.panel-tabset}

### Operators
We write "or" using `||`, "and" using `&&`.
```{r}
FALSE || TRUE
TRUE && TRUE
```

To negate a boolean value, use `!`:

```{r}
!FALSE
!TRUE
```

### Exercise
Write an `if-else` statement that returns "LOL" if `x` is either `"MrBeast"` or `"FruBeast"`. Return "Boring!" otherwise.

### Solution

```{r}
x = "MrsBeast"
if (x == "MrBeast" || x == "FruBeast") {
  "LOL"
} else {
  "Boring!"
}
```

### Exercise
Do the previous exercise again. But this time, don't modify anything else than the question marks.

```{r}
#| eval: False
x = "MrBeast"
if (!(x == "MrBeast" || x == "FruBeast")) {
  ?
} else {
  ?
}
```


### Solution

```{r}
#| eval: False

x = "MrBeast"
if (!(x == "MrBeast" || x == "FruBeast")) {
  "Boring!"
} else {
  "LOL"
}
```
:::


# On vectors

## Concatenating vectors

Values are concatenated into a vector using `c()`.

```{r}
x <- c(1,3,2)
x
```

The input to `c` can also be vectors.

You find the length of a vector using `length`:

```{r}
length(x)
```


::: {.panel-tabset}

### Exercise
Construct the vector `c(1,2,3,4,5)` from the vectors `x <- c(1,2,3)` and `y <- c(4,5)`

### Solution
```{r}
x <- c(1,2,3)
y <- c(4,5)
c(x,y)
```
:::

## Generating vectors

We have the syntax:
`seq(from = a, to = b, by = k)`

```{r}
seq(1, 10, by = 3)
```

The `by` argument defaults to `1`.

```{r}
seq(1,10)
```


::: {.panel-tabset}
### Exercise
Use `seq` to generate the following:

1. `1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11`
2. `2, 4, 6, 8, 10, â€¦ , 50`
3. All of the odd numbers from 17 through to 33.

### Solution

```{r}
seq(1, 11)
seq(2, 50, by = 2)
seq(17, 33, by = 2)
```


### Exercise
1. Make a vector containing `0, 0.1, 0.2, \ldots, 10`.
2. Make a vector of `9` evenly spaced numbers between `10` and `33`.

### Solution 
```{r}
seq(0,10, by = 0.1)
```

```{r}
seq(10, 33, length.out = 9)
```

### Exercise
Create a vector `1,2,\ldots, n`, where `n` is the length of `x=mtcars$mpg`.

1. Using `seq_along`, (look up!)
2. Using `seq_len`, (look up!)
3. Using `seq`,

### Solution

```{r}
x=mtcars$mpg
seq_along(x)
seq_len(length(x))
seq(1, length(x))
```


:::

## Reverse order

```{r}
letters
```

```{r}
rev(letters)
```

::: {.panel-tabset}

### Exercise

Construct the following vectors using `rev` and `seq`.

1. The numbers `3, 2, 1, 0, -1, -2, -3`.
2. The numbers `9, 7, 5, 3, 1, -1, -3, -5, -7`

### Solution

```{r}
rev(seq(-3,3))
rev(seq(-7,7, by = 2))
```

:::


## Replication

You may create a vector of `1`s as follows:
```{r}
rep(1, 10)
```

The call `rep(x, n)` function replicates its first argument `n` times. Here `x` can also be a vector.


:::{.panel-tabset}
### Exercise
Create the vector `c(1,2,3,1,2,3,1,2,3)` using `seq` and `rep`.

### Solution
```{r}
rep(seq(3), 3)
```
:::


## Bad way of generating vectors

The most popular way of generating vectors is `a:b`, which works as follows.

```{r}
1:10
```

This function is *not recommended*, since it is a frequent source of bugs! In particular, we have:

```{r}
1:0
```

You will see this function used a lot, but better safe than sorry.

::: {.panel-tabset}
### Exercise
Run `1:-1`. What happens here? Use the function to generate the numbers `1, 0, -1, ... -10`. Then use `rev` along `-10:1` to generate the same set.

### Solution
```{r}
1:-10
```

```{r}
rev(-10:1)
```
:::

## Combining everything

* Concatenate with `c`,
* Construct evenly spaced vectors with `seq`,
* Repeated values with `rep`.
* Reverse with `rev`.

:::{.panel-tabset}

### Exercise
Construct the vector containing 10 ones and the numbers 1,2,3,4...10. 

### Solution
```{r}
c(rep(1, 10), seq(1, 10))
```

### Exercise
Construct the vector `1,2,3,4,5,4,3,2,1`.

### Solution
```{r}
c(seq(1,5), rev(seq(1, 4)))
```
:::


## The `NULL` value
`NULL` is like `None` in Python. It's a special value meaning "nothing" or "undefined". 

The empty vector is `NULL`.
```{r}
c()
```

:::{.panel-tabset}

### Exercise
Investigate `c(NULL, NULL)`. What happens, any idea why?

### Solution
```{r}
c(NULL, NULL)
```

Two times nothing is still nothing!
:::


## Testing for `NULL`

You can't test for `NULL` using equality:
```{r}
x = NULL
if (x == NULL) {
  print("x is NULL")
}
```

Instead, use `is.null`:

```{r}
x = NULL
if (is.null(x)) print("x is NULL")
```

## Why bother?

`NULL` is a very frequent "gotcha" in `R`. 

Inputs to programs will sometimes be `NULL`.

```{r}
x <- seq(1, 5)
if (x[1] < 5) {
  print(x)
}
```

This works, but 

```{r}
x <- NULL
if (x[1] < 5) {
  print(x)
}
```

## Solution

```{r}
if (!is.null(x)) {
  if (x[1] < 5) {
    print(x)
  }
}
```

`R` is *not* short-circuiting!

```{r}
if (!is.null(x) || (x[1] < 5)) {
  print(x)
}
```

## `seq_along` again

```{r}
x <- seq(20, 29)
seq_along(x)
seq(1, length(x))
1:length(x)
```

```{r}
x <- NULL
seq_along(x)
seq(1, length(x))
1:length(x)
```

You never want `1 0` here!

## Summary of vectors

1. Construct vectors with `rep`, `seq`, and `rev`.
2. Avoid `i:j`; use `seq(i, j)` instead.
3. Use `seq_along` when enumerating a vector.

. . .

* I need to say 2 and 3 because `R` has (like most old programming languages), some serious design flaws.

* Hundreds of other flaws and gotchas are documented in the book [The R Inferno](https://www.burns-stat.com/documents/books/the-r-inferno/).

# Looping
## `for` loops

```{r}
seq(from = 1, to = 5)
```

The `for` loop iterates through a vector and does something every time.
```{r}
for (i in seq(from = 1, to = 5)) {
  print(paste("i equals", i))
}
```

## Adding with `for` loops

Almost every non-trivial computation is done using loops, including addition of many elements.

:::{.panel-tabset}

### Adding
```{r}
adder = 0
for (i in seq(from = 1, to = 10)) {
  adder = adder + i
  print(adder)
}
adder
```

### Exercise
Calculate the product of the numbers $1,\ldots,5$ using a `for` loop.

### Solution
```{r}
mul = 1
for (i in seq(from = 2, to = 5)) {
  mul = mul * i
}
print(mul)
```
:::

## Investments

Let's calculate compounding of investments.

```{r}
r = 0.02
vec <- rep(0, 10)
vec[1] = 1200
for (i in seq(2, 10)) vec[i] = vec[i-1] * (1+r) # Indexing starts at 1.
vec[10]

```

```{r}
vec[1] * (1+r)**9
```

**Note:** The looping variable is kept after the loop:
```{r}
i
```

This is unlike most other languages and can often lead to bugs!

## Exercise
::: {.panel-tabset}
### Exercise
Using `for` loops, create the vector with elements `1,2,6,24,...`, where the $i$th element is the product `1*2*...*i`.

### Solution
```{r}
vec <- rep(1, 10)
for (i in seq(from = 2, to = 10)) {
  vec[i] = vec[i-1] * i
}
print(vec)
```

### Exercise
Look up the function `cumsum`. How can you solve the previous exercise (and the corresponding exercise involving sums) with less work?

### Solution
```{r}
cumsum(seq(1,10))
cumprod(seq(1,10))
```

This is a common theme with `R` - common and simple operations are already implemented.
:::

# Looping and conditionals

## Example

Looping is often used together with conditionals.

For the next exercise, recall that you may sum the elements of a vector using:

```{r}
x <- c(1, -4, 7, 12)
adder = 0
for (elem in x) adder = adder + elem
adder
```

:::{.panel-tabset}

### Exercise
Using a `for` loop and conditionals, calculate the sum of the non-negative elements in the array `x`. Try it out on `x<-c(1, -4, 7, 12, -100)`.

### Solution
```{r}
x = c(1, -4, 7, 12, -100)
adder = 0
for (elem in x) {
  if (elem > 0) adder = adder + elem
}
adder
```

:::


## Adding even numbers

```{r}
adder = 0
for (i in seq(from = 1, to = 100)) {
  if (i %% 2 == 0) { ## Is TRUE iff i is even.
    adder = adder + i
  }
}
print(adder)
```

::: {.panel-tabset}

### Exercise
Given the numbers `1,2,...,100`, add all odd numbers in the list and *twice* the even numbers in the list. Use a `for` loop!

### Solution

```{r}
adder = 0
for (i in seq(from = 1, to = 100)) {
  if (i %% 2 == 0) { ## Is TRUE iff i is even.
    adder = adder + 2*i
  } else if (i %% 2 == 1) {
    adder = adder + i
  }
}
print(adder)
```

### Exercise
Do the same exercise with `seq` and `sum`.

### Solution

```{r}
2*sum(seq(0,100, 2)) + sum(seq(1, 99, 2))
```
:::


## The Fizz game

```{r}
n = 20
for (i in seq(n)) {
  if (i %% 3 == 0) { ## 3 evenly divides i.
    print("Fizz!")
  } else {
    print(i)
  }
}
```

## The Buzz game
```{r}
n = 20
for (i in seq(n)) {
  if (i %% 5 == 0) { ## 5 evenly divides i.
    print("Buzz!")
  } else {
    print(i)
  }
}
```

## The Fizzbuzz game

::: {.panel-tabset}

### Exercise
Write the program that loops through the numbers `1...100` and prints `Fizz!` when the number is divisible by `3`, `Buzz!` when the number is divisible by `5`, `Fizzbuzz!` when the number is divisible by `15`, and the number `i` otherwise.

### Solution
```{r}
n = 20
for (i in seq(n)) {
  if (i %% 15 == 0) { ## 3 evenly divides i.
    print("Fizzbuzz!")
  } else if (i %% 5 == 0) {
    print("Buzz!")
  } else if (i %% 3 == 0) {
    print("Fizz!")
  } else {
    print(i)
  }
}
```
:::

## Another solution

We can work with vectors instead:

```{r}
x <- seq(1, 20)
div_3 <- x %% 3 == 0 
div_5 <- x %% 5 == 0
```

. . .

```{r}
div_3
div_5
```

. . .

The `&` operator ands vectors:
```{r}
div_15 = div_3 & div_5
div_15
```

## Constructing a vector
```{r}
out <- x
out[div_5] = "Buzz!"
out[div_3] = "Fizz!"
out[div_15] = "Fizzbuzz!"
out
```

Here we have used *boolean indexing*; we'll have a closer look later.

Most idiomatic R programming is similar to this. *Work with vectors as much as possible.*

## Why Fizzbuzz?

* What a stupid and meaningless problem?
* No, because in incorparates the two most important programming concepts, `if` and `for`.
* A common interview question for verifying that a [candidate know programming *at all*](https://blog.codinghorror.com/why-cant-programmers-program/).
* Congrats! You're qualified for a programming job!

# More looping construct

* `while`: Runs while a condition is `TRUE`.
* `repeat`: Runs forever until stopped by `break`. **Never** used this one!
* `next`: Skip iteration in a loop.

`next` and `break` can be useful, but we won't discuss them.

## `while` loops

```{r}
counter = 1
while (counter < 5) {
  print(counter)
  counter = counter + 1
}
```

* *Rarely* useful, but you may see it in other people's code.
* I use it, maybe, once a year. (Programming ~every day!)

::: {.panel-tabset}
### Exercise

What does this function do?
```{r}
#| eval: False
while(TRUE) print(1)
```

### Solution
It prints `1` forever! This is an *infinite loop*. You can enter infinite loops with `while` loops if you're not careful.

:::

## Why no `while` loops?
* What is the difference between `for` loops and `while` loops?
* `for` loops are not Turing complete - there are programs you need `while` loops for. 
* (For those interested, programming with conditionals and *only* for loops is called [primitive recursion.](https://en.wikipedia.org/wiki/Primitive_recursive_function) )
* But these programs are rare!
* Infinite loops are impossible with for loops.
* You can immediately see what you're looping over.
* Just less bug prone than `for` loops in general.


# When to use loops?

## When to use loops

1. Loops are slow. 
2. Loops are hard to read.
3. Loops are bug-prone.

See if you can do whatever you want using built-in functions or packages. 

## Loops are often not necessary.
Let's say you want to calculate the mean of all rows in a matrix:

```{r}
x <- matrix(seq(9), 3, 3, byrow = TRUE)
x
```

```{r}
means <- rep(0, 3)
for (i in seq(3)) {
  means[i] <- mean(x[i,])
}

means
```


## However,
`R` has a function that does this for you!
```{r}
rowMeans(x)
```

1. Faster,
2. Easier to read (obvious!),
3. Less bug prone.

Just 100% superior all around.

If you do *basic* things, there's always a function in `R` or a well-established library.

You can even ask ChatGPT! Just verify the results.

# Summary

1. `if/else` is used for conditional computations.
2. Create vectors with `seq`, `rep`, and `c`. Use `seq_along` when needed (like `enumerate` in Python.)
3. `for` is used for almost all looping, but `while` also exists.
4. Be careful around `NULL`s.
