---
title: "9: Tidyverse"
subtitle: "R for faculty, Fall 2024"
author: "Jonas Moss"
format:
  revealjs:
    error: True
    theme: [default, custom.scss]
    width: 1600
    height: 900
    embed-resources: True
    mainfont: "Verdana"
    min-scale: 0.2
    max-scale: 2
    echo: true
---

# Tidyverse
The `tidyverse` is set of tools tailored for data analysis and research. 

1. `tibble`: A better data frame.
2. `dplyr`: Manipulation of data frames and tibbles.
3. `tidyr`: Convert data to the "long form" or "tidy format" required for most models.

**The package `magrittr` is virtually always combined with these tools.**

## `tibble`

::: {.panel-tabset}

### Band
`tibbles` are stricter variants of data frames that are less bug prone.

```{r}
dplyr::band_members
```

### Printing
When tibbles are printed, they display only the first few rows. Moreover, we can see the data types clearly.

```{r}
tibble::as_tibble(mtcars)
```
:::

# `dplyr`

`dplyr` is the library for data manipulation. It's really big, and we'll talk about just a few components.

* select
* group_by
* arrange
* filter
* mutate

### `filter`


Filter by column using
```{r}
dplyr::filter(mtcars, cyl == 4)
```
### Pipe
Everyone uses library here along with the *pipe*.
```{r}
library("dplyr")
mtcars %>% filter(cyl == 4)
```


## Calculating correlation

"Pipe" the elements and access columns with `.? 

```{r}
mtcars %>% 
  filter(cyl == 4) %>%
  { cor(x=.$mpg, y=.$disp) }
```


## More filtering
```{r}
dplyr::filter(mtcars, cyl == 4, disp >= 100)
```

## arrange

Use `arrange` to sort your data frames. This is very useful for plotting!
```{r}
dplyr::arrange(mtcars, mpg)
```
## mutate

Use `mutate` do define new columns from old.

::: {.panel-tabset}

### Mutate

```{r}
dplyr::mutate(mtcars, f = drat^2 * mpg)
```


### Remove

Remove variables by assigning `NULL` to them

```{r}
dplyr::mutate(mtcars, f = drat^2 * mpg, drat = NULL, mpg = NULL)
```
:::

## `group_by`

`group_by` groups 
```{r}
mtcars %>% 
  group_by(vs) %>%
  tally()
```

## `summarise`
```{r}
mtcars %>% 
  group_by(vs) %>%
  summarise(n = n())
```

```{r}
mtcars %>% 
  group_by(vs) %>%
  summarise(n = n(),
            mpg = mean(mpg))
```

## `summarise_all`

```{r}
mtcars %>% 
  group_by(cyl) %>%
  summarise_all(mean)
```


# `tidyr`

* Most `R` functions require each row to *one* observation and each column to encode one variable (e.g., gender). 
* This let's us use, e.g., the `lm` function.
* But raw data is often not like this!
* Called either *long form* or *tidy data*.

## Wide data

> The data correspond to an experiment in which a treatment for depression is studied. Two groups of patients (1: control / 2: treatment) have been followed at five different times (0: pre-test, 1: one month post-test, 3: 3 months follow-up and 6: 6 months follow-up). The dependent variable is a depression score.

```{r}
depression <- datarium::depression
head(depression)
```
Here each patient has its own row. This is called *wide* data.

## Wide and long data

Almost all functions are designed for *long data*.

In long data each row is one observation.

```{r}
#| echo: False
long <- tidyr::pivot_longer(depression, cols = !c(treatment, id), names_to = "time", values_to = "score")
long
```

## Application to ANOVA

Let's try to fit a two-way ANOVA model, i.e.,
$$y_{it} = \alpha_i + \beta_t + \gamma_{it} + \epsilon_{it},$$

where $i$ indexes the patients and $t$ indexes the time points. Here $\alpha_i$ is the individual effect, $\beta_t$ is the effect of time, and $\gamma_{it}$ the interaction effect between patients and time. 

## Formula

```{r}
#| eval: False
lm(score ~ treatment + time + treatment*time, data = depression)
```

Our data is not at the correct format for this. We need all scores (`t0`,`t1`,`t2`,`t3`) to be in the same column.

## Manually?

For the first patient, we would want this:

```{r}
id <- rep(1,4)
score <- c(296, 175,	187,	242)
time <- c("t0", "t1", "t2", "t3")
treatment <- rep("ctr", 4)

data.frame("id" = id, "score" = score, "time" = time, "treatment" = treatment)
```

It's important to keep the `id` in case we need them for another model.

## Using `pivot_longer`

We may use the function `pivot_longer` to construct a long table.

```{r}
long <- tidyr::pivot_longer(
  depression, 
  cols = !c(treatment, id), 
  names_to = "time", 
  values_to = "score")
```


## Fitting the model
```{r}
model <- lm(score ~ treatment*time, data = long)
summary(model)
```


## Interaction term
In ANOVA we always check if the interaction term is significant. We can do this using
```{r}
model_no_interact <- lm(score ~ treatment + time, data = long)
```

The `anova` generic function does general analysis of variance (also possible for non-linear regression models such as logistic regression).

```{r}
anova(model_no_interact, model)
```


## Larger ANOVA table
```{r}
model_mean <- lm(score ~ 1, data = long)
model_time <- lm(score ~ time, data = long)
```

```{r}
anova(model_mean, model_time, model_no_interact, model)
```

1. The first *p-value* tells us that `time` has a highly significant effect.
2. The second *p*-value tells us that `treatment` has a highly significant effect. 
3. The third *p*-value tells us there is a barely significant interaction effect `time*treatment`.

## Exercises

:::{.panel-tabset}
### Exercise
Take a look at the `datarium::anxiety` data set. Using ANOVA, figure out if there is a significant effect of time, treatment (level of exercise), and interaction effect.

### Solution

### Exercise
Take a look at the `datarium::headache` data set. This one is about three-way ANOVA, i.e., a model including three covariates (dependent variables) and potential interactions between them. Make the model suitable for three-way ANOVA using `tidyr`. Then fit models with a variety of interesting interaction terms, and test them using the `anova` function.

### Solution

:::
